//==============================================================
//
//ポリゴン処理[polygon.cpp]
//Author:佐久間優香
//
//==============================================================
#include"polygon.h"
#include"manager.h"
#include"texture.h"
#include"wall.h"

//マクロ定義
#define WIDTH (2000.0f * 2.0f) //横幅
#define HEIGHT (2000.0f * 2.0f) //高さ
#define VERTICL (0.0f)	//縦幅
//vertical

//==============================================================
//コンストラクタ
//==============================================================
CWall::CWall()
{
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//移動量
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//向き
}

//==============================================================
//コンストラクタ(オーバーロード)
//==============================================================
CWall::CWall(TYPE type,D3DXVECTOR3 pos)
{
	m_pos = pos;
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//移動量
	m_rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		//向き

	////オブジェクト2D位置の設定
	//CObject3D::SetPosition(pos);

	////エネミー位置の設定
	//CEnemy::SetPosition(pos);

	//種類の設定
	SetType(type);
}

//==============================================================
//デストラクタ
//==============================================================
CWall::~CWall()
{

}

//==============================================================
//敵のの生成処理
//==============================================================
CWall *CWall::Create(TYPE type, D3DXVECTOR3 pos)
{
	CWall *pPolygon = NULL;

	if (pPolygon == NULL)
	{
		//オブジェクト2Dの生成
		pPolygon = new CWall(type,pos);

		//初期化処理
		pPolygon->Init();
	}

	return pPolygon;
}

//==============================================================
//敵の初期化処理
//==============================================================
HRESULT CWall::Init(void)
{
	CTexture * pTexture = CManager::Get()->GetTexturet();

	m_nldxTexture = pTexture->Regist("data\\TEXTURE\\wall00.jpg");

	//オブジェクト2Dの初期化処理
	CObject3D::Init(); 

	//テクスチャの割り当て
	BindTexture(m_nldxTexture);

	//種類の設定
	CObject::SetType(TYPE_NONE);

	SetPosition(m_pos);


	//サイズ設定
	SetSize(WIDTH, HEIGHT, VERTICL);
	

	return S_OK;
}

//==============================================================
//敵の終了処理
//==============================================================
void CWall::Uninit(void)
{
	//オブジェクト2Dの終了処理
	CObject3D::Uninit();
}

//==============================================================
//敵の更新処理
//==============================================================
void CWall::Update(void)
{

}

//==============================================================
//敵の描画処理
//==============================================================
void CWall::Draw(void)
{
	//オブジェクト2Dの描画処理
	CObject3D::Draw();
}